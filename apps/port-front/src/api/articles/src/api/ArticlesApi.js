/**
 * article.newsbro.cc
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RepoArticleSrcApiDtoArticleCreateRequest from '../model/RepoArticleSrcApiDtoArticleCreateRequest';
import RepoArticleSrcApiDtoArticleResponse from '../model/RepoArticleSrcApiDtoArticleResponse';
import RepoArticleSrcApiDtoArticleTriggerIngestionRequest from '../model/RepoArticleSrcApiDtoArticleTriggerIngestionRequest';
import RepoArticleSrcApiDtoArticleUpdateRequest from '../model/RepoArticleSrcApiDtoArticleUpdateRequest';
import RepoArticleSrcApiDtoErrorResponse from '../model/RepoArticleSrcApiDtoErrorResponse';

/**
* Articles service.
* @module api/ArticlesApi
* @version 1.3.2
*/
export default class ArticlesApi {

    /**
    * Constructs a new ArticlesApi. 
    * @alias module:api/ArticlesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the articlesCategoriesGet operation.
     * @callback module:api/ArticlesApi~articlesCategoriesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get categories
     * Get all available article categories
     * @param {String} authorization Insert your access token
     * @param {module:api/ArticlesApi~articlesCategoriesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    articlesCategoriesGet(authorization, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling articlesCategoriesGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/v1/articles/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articlesGet operation.
     * @callback module:api/ArticlesApi~articlesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RepoArticleSrcApiDtoArticleResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all articles
     * Get a list of articles with optional filtering and pagination
     * @param {String} authorization Insert your access token
     * @param {Object} opts Optional parameters
     * @param {String} [category] Filter by category
     * @param {String} [subcategory] Filter by subcategory
     * @param {String} [search] Search in title and abstract
     * @param {Number} [limit = 10)] Limit number of results
     * @param {Number} [offset = 0)] Offset for pagination
     * @param {module:api/ArticlesApi~articlesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RepoArticleSrcApiDtoArticleResponse>}
     */
    articlesGet(authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling articlesGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'category': opts['category'],
        'subcategory': opts['subcategory'],
        'search': opts['search'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RepoArticleSrcApiDtoArticleResponse];
      return this.apiClient.callApi(
        '/api/v1/articles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articlesIdDelete operation.
     * @callback module:api/ArticlesApi~articlesIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete article
     * Delete an article by ID
     * @param {Number} id Article ID
     * @param {String} authorization Insert your access token
     * @param {module:api/ArticlesApi~articlesIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    articlesIdDelete(id, authorization, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling articlesIdDelete");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling articlesIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/articles/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articlesIdGet operation.
     * @callback module:api/ArticlesApi~articlesIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RepoArticleSrcApiDtoArticleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get article by ID
     * Get a specific article by its ID
     * @param {Number} id Article ID
     * @param {String} authorization Insert your access token
     * @param {module:api/ArticlesApi~articlesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RepoArticleSrcApiDtoArticleResponse}
     */
    articlesIdGet(id, authorization, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling articlesIdGet");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling articlesIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RepoArticleSrcApiDtoArticleResponse;
      return this.apiClient.callApi(
        '/api/v1/articles/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articlesIdPut operation.
     * @callback module:api/ArticlesApi~articlesIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RepoArticleSrcApiDtoArticleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update article
     * Update an existing article by ID
     * @param {Number} id Article ID
     * @param {String} authorization Insert your access token
     * @param {module:model/RepoArticleSrcApiDtoArticleUpdateRequest} article Article update data
     * @param {module:api/ArticlesApi~articlesIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RepoArticleSrcApiDtoArticleResponse}
     */
    articlesIdPut(id, authorization, article, callback) {
      let postBody = article;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling articlesIdPut");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling articlesIdPut");
      }
      // verify the required parameter 'article' is set
      if (article === undefined || article === null) {
        throw new Error("Missing the required parameter 'article' when calling articlesIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RepoArticleSrcApiDtoArticleResponse;
      return this.apiClient.callApi(
        '/api/v1/articles/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articlesIngestionPost operation.
     * @callback module:api/ArticlesApi~articlesIngestionPostCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Trigger article ingestion
     * Trigger ingestion of articles published within a specified date range
     * @param {String} authorization Insert your access token
     * @param {module:model/RepoArticleSrcApiDtoArticleTriggerIngestionRequest} article Article update data
     * @param {module:api/ArticlesApi~articlesIngestionPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    articlesIngestionPost(authorization, article, callback) {
      let postBody = article;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling articlesIngestionPost");
      }
      // verify the required parameter 'article' is set
      if (article === undefined || article === null) {
        throw new Error("Missing the required parameter 'article' when calling articlesIngestionPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/api/v1/articles/ingestion', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articlesPost operation.
     * @callback module:api/ArticlesApi~articlesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RepoArticleSrcApiDtoArticleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new article
     * Create a new article with the provided data
     * @param {String} authorization Insert your access token
     * @param {module:model/RepoArticleSrcApiDtoArticleCreateRequest} article Article data
     * @param {module:api/ArticlesApi~articlesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RepoArticleSrcApiDtoArticleResponse}
     */
    articlesPost(authorization, article, callback) {
      let postBody = article;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling articlesPost");
      }
      // verify the required parameter 'article' is set
      if (article === undefined || article === null) {
        throw new Error("Missing the required parameter 'article' when calling articlesPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RepoArticleSrcApiDtoArticleResponse;
      return this.apiClient.callApi(
        '/api/v1/articles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articlesSubcategoriesGet operation.
     * @callback module:api/ArticlesApi~articlesSubcategoriesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get subcategories
     * Get subcategories for a specific category or all subcategories
     * @param {String} authorization Insert your access token
     * @param {Object} opts Optional parameters
     * @param {String} [category] Filter subcategories by category
     * @param {module:api/ArticlesApi~articlesSubcategoriesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    articlesSubcategoriesGet(authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling articlesSubcategoriesGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'category': opts['category']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/v1/articles/subcategories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
