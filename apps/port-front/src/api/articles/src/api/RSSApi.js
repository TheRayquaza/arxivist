/**
 * Repo-Article
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RepoArticleSrcApiDtoErrorResponse from '../model/RepoArticleSrcApiDtoErrorResponse';
import RepoArticleSrcApiDtoRSSCreateRequest from '../model/RepoArticleSrcApiDtoRSSCreateRequest';
import RepoArticleSrcApiDtoRSSResponse from '../model/RepoArticleSrcApiDtoRSSResponse';
import RepoArticleSrcApiDtoRSSUpdateRequest from '../model/RepoArticleSrcApiDtoRSSUpdateRequest';
import RepoArticleSrcApiDtoTreeRSSResponse from '../model/RepoArticleSrcApiDtoTreeRSSResponse';

/**
* RSS service.
* @module api/RSSApi
* @version 1.0.0
*/
export default class RSSApi {

    /**
    * Constructs a new RSSApi. 
    * @alias module:api/RSSApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the rssGet operation.
     * @callback module:api/RSSApi~rssGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RepoArticleSrcApiDtoRSSResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all rss
     * Get a list of rss with optional filtering
     * @param {Object} opts Optional parameters
     * @param {String} [beginAt] Filter by begin date (YYYY-MM-DD)
     * @param {String} [endAt] Filter by end date (YYYY-MM-DD)
     * @param {module:api/RSSApi~rssGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RepoArticleSrcApiDtoRSSResponse>}
     */
    rssGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'begin_at': opts['beginAt'],
        'end_at': opts['endAt']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RepoArticleSrcApiDtoRSSResponse];
      return this.apiClient.callApi(
        '/api/v1/rss', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rssIdDelete operation.
     * @callback module:api/RSSApi~rssIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete rss
     * Delete an rss by name
     * @param {String} name RSS Name
     * @param {String} authorization Insert your access token
     * @param {module:api/RSSApi~rssIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rssIdDelete(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling rssIdDelete");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/rss/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rssIdGet operation.
     * @callback module:api/RSSApi~rssIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RepoArticleSrcApiDtoRSSResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get rss by name
     * Get a specific rss by its name
     * @param {String} name RSS Name
     * @param {module:api/RSSApi~rssIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RepoArticleSrcApiDtoRSSResponse}
     */
    rssIdGet(name, callback) {
      let postBody = null;
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling rssIdGet");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RepoArticleSrcApiDtoRSSResponse;
      return this.apiClient.callApi(
        '/api/v1/rss/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rssIdPut operation.
     * @callback module:api/RSSApi~rssIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RepoArticleSrcApiDtoRSSResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update rss
     * Update an existing rss by ID
     * @param {Number} id RSS ID
     * @param {String} authorization Insert your access token
     * @param {module:model/RepoArticleSrcApiDtoRSSUpdateRequest} rss Rss update data
     * @param {module:api/RSSApi~rssIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RepoArticleSrcApiDtoRSSResponse}
     */
    rssIdPut(id, authorization, rss, callback) {
      let postBody = rss;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling rssIdPut");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling rssIdPut");
      }
      // verify the required parameter 'rss' is set
      if (rss === undefined || rss === null) {
        throw new Error("Missing the required parameter 'rss' when calling rssIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RepoArticleSrcApiDtoRSSResponse;
      return this.apiClient.callApi(
        '/api/v1/rss/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rssPost operation.
     * @callback module:api/RSSApi~rssPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RepoArticleSrcApiDtoRSSResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new rss
     * Create a new rss with the provided data
     * @param {module:model/RepoArticleSrcApiDtoRSSCreateRequest} rss RSS data
     * @param {module:api/RSSApi~rssPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RepoArticleSrcApiDtoRSSResponse}
     */
    rssPost(rss, callback) {
      let postBody = rss;
      // verify the required parameter 'rss' is set
      if (rss === undefined || rss === null) {
        throw new Error("Missing the required parameter 'rss' when calling rssPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RepoArticleSrcApiDtoRSSResponse;
      return this.apiClient.callApi(
        '/api/v1/rss', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rssTreeGet operation.
     * @callback module:api/RSSApi~rssTreeGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RepoArticleSrcApiDtoTreeRSSResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get tree rss
     * Get the tree structure of rss feeds with optional filtering
     * @param {Object} opts Optional parameters
     * @param {String} [beginAt] Filter by begin date (YYYY-MM-DD)
     * @param {String} [endAt] Filter by end date (YYYY-MM-DD)
     * @param {module:api/RSSApi~rssTreeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RepoArticleSrcApiDtoTreeRSSResponse>}
     */
    rssTreeGet(opts, callback) {
      opts = opts || {};
      let postBody = null;
      let headerParams = {
      };
      let pathParams = {
      };
      let queryParams = {
        'begin_at': opts['beginAt'],
        'end_at': opts['endAt']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RepoArticleSrcApiDtoTreeRSSResponse];
      return this.apiClient.callApi(
        '/api/v1/rss/tree', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }
}
