/**
 * article.newsbro.cc
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RepoArticleSrcApiDtoFeedbackRequest from '../model/RepoArticleSrcApiDtoFeedbackRequest';
import RepoArticleSrcApiDtoFeedbackResponse from '../model/RepoArticleSrcApiDtoFeedbackResponse';
import RepoArticleSrcApiDtoFeedbackStatsResponse from '../model/RepoArticleSrcApiDtoFeedbackStatsResponse';
import RepoArticleSrcApiDtoFeedbackTriggerIngestionRequest from '../model/RepoArticleSrcApiDtoFeedbackTriggerIngestionRequest';

/**
* Feedback service.
* @module api/FeedbackApi
* @version 1.3.2
*/
export default class FeedbackApi {

    /**
    * Constructs a new FeedbackApi. 
    * @alias module:api/FeedbackApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the articlesIdFeedbackDelete operation.
     * @callback module:api/FeedbackApi~articlesIdFeedbackDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete feedback for an article
     * Delete user feedback for a specific article
     * @param {Number} id Article ID
     * @param {module:api/FeedbackApi~articlesIdFeedbackDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    articlesIdFeedbackDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling articlesIdFeedbackDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/articles/{id}/feedback', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articlesIdFeedbackGet operation.
     * @callback module:api/FeedbackApi~articlesIdFeedbackGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RepoArticleSrcApiDtoFeedbackStatsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get feedback for a specific article
     * Get feedback statistics and user's feedback for a specific article
     * @param {Number} id Article ID
     * @param {module:api/FeedbackApi~articlesIdFeedbackGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RepoArticleSrcApiDtoFeedbackStatsResponse}
     */
    articlesIdFeedbackGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling articlesIdFeedbackGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RepoArticleSrcApiDtoFeedbackStatsResponse;
      return this.apiClient.callApi(
        '/api/v1/articles/{id}/feedback', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articlesIdFeedbackPost operation.
     * @callback module:api/FeedbackApi~articlesIdFeedbackPostCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create feedback for an article
     * Create or update user feedback for a specific article
     * @param {Number} id Article ID
     * @param {module:model/RepoArticleSrcApiDtoFeedbackRequest} feedback Feedback data
     * @param {module:api/FeedbackApi~articlesIdFeedbackPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    articlesIdFeedbackPost(id, feedback, callback) {
      let postBody = feedback;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling articlesIdFeedbackPost");
      }
      // verify the required parameter 'feedback' is set
      if (feedback === undefined || feedback === null) {
        throw new Error("Missing the required parameter 'feedback' when calling articlesIdFeedbackPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/api/v1/articles/{id}/feedback', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the feedbackAllGet operation.
     * @callback module:api/FeedbackApi~feedbackAllGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RepoArticleSrcApiDtoFeedbackResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all feedback
     * Get all feedback with pagination (Admin only)
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] Page number
     * @param {Number} [limit = 10)] Items per page
     * @param {module:api/FeedbackApi~feedbackAllGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RepoArticleSrcApiDtoFeedbackResponse>}
     */
    feedbackAllGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RepoArticleSrcApiDtoFeedbackResponse];
      return this.apiClient.callApi(
        '/feedback/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the feedbackCsvGet operation.
     * @callback module:api/FeedbackApi~feedbackCsvGetCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export all feedback to CSV
     * Export all article feedback data to CSV format (Admin only)
     * @param {Object} opts Optional parameters
     * @param {String} [startDate] Start date (YYYY-MM-DD)
     * @param {String} [endDate] End date (YYYY-MM-DD)
     * @param {module:api/FeedbackApi~feedbackCsvGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    feedbackCsvGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/csv'];
      let returnType = File;
      return this.apiClient.callApi(
        '/feedback/csv', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the feedbackIngestPost operation.
     * @callback module:api/FeedbackApi~feedbackIngestPostCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Trigger feedback ingestion
     * Trigger ingestion of feedback data for articles within a specified date range (Admin only)
     * @param {module:model/RepoArticleSrcApiDtoFeedbackTriggerIngestionRequest} ingestion Ingestion date range
     * @param {module:api/FeedbackApi~feedbackIngestPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    feedbackIngestPost(ingestion, callback) {
      let postBody = ingestion;
      // verify the required parameter 'ingestion' is set
      if (ingestion === undefined || ingestion === null) {
        throw new Error("Missing the required parameter 'ingestion' when calling feedbackIngestPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/feedback/ingest', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the feedbackMyGet operation.
     * @callback module:api/FeedbackApi~feedbackMyGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RepoArticleSrcApiDtoFeedbackResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user's feedback history
     * Get all feedback given by the authenticated user
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] Page number
     * @param {Number} [limit = 10)] Items per page
     * @param {module:api/FeedbackApi~feedbackMyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RepoArticleSrcApiDtoFeedbackResponse>}
     */
    feedbackMyGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RepoArticleSrcApiDtoFeedbackResponse];
      return this.apiClient.callApi(
        '/feedback/my', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the feedbackStatsGet operation.
     * @callback module:api/FeedbackApi~feedbackStatsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RepoArticleSrcApiDtoFeedbackStatsResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get feedback statistics
     * Get aggregated feedback statistics for all articles (Admin only)
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] Page number
     * @param {Number} [limit = 10)] Items per page
     * @param {module:api/FeedbackApi~feedbackStatsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RepoArticleSrcApiDtoFeedbackStatsResponse>}
     */
    feedbackStatsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RepoArticleSrcApiDtoFeedbackStatsResponse];
      return this.apiClient.callApi(
        '/feedback/stats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }
  }
