/**
 * article.newsbro.cc
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RepoArticleSrcApiDtoArticleCreateRequest model module.
 * @module model/RepoArticleSrcApiDtoArticleCreateRequest
 * @version 1.3.2
 */
class RepoArticleSrcApiDtoArticleCreateRequest {
    /**
     * Constructs a new <code>RepoArticleSrcApiDtoArticleCreateRequest</code>.
     * @alias module:model/RepoArticleSrcApiDtoArticleCreateRequest
     * @param category {String} 
     * @param link {String} 
     * @param publishedAt {String} 
     * @param subcategory {String} 
     * @param title {String} 
     */
    constructor(category, link, publishedAt, subcategory, title) { 
        
        RepoArticleSrcApiDtoArticleCreateRequest.initialize(this, category, link, publishedAt, subcategory, title);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, category, link, publishedAt, subcategory, title) { 
        obj['category'] = category;
        obj['link'] = link;
        obj['published_at'] = publishedAt;
        obj['subcategory'] = subcategory;
        obj['title'] = title;
    }

    /**
     * Constructs a <code>RepoArticleSrcApiDtoArticleCreateRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RepoArticleSrcApiDtoArticleCreateRequest} obj Optional instance to populate.
     * @return {module:model/RepoArticleSrcApiDtoArticleCreateRequest} The populated <code>RepoArticleSrcApiDtoArticleCreateRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RepoArticleSrcApiDtoArticleCreateRequest();

            if (data.hasOwnProperty('abstract')) {
                obj['abstract'] = ApiClient.convertToType(data['abstract'], 'String');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = ApiClient.convertToType(data['link'], 'String');
            }
            if (data.hasOwnProperty('published_at')) {
                obj['published_at'] = ApiClient.convertToType(data['published_at'], 'String');
            }
            if (data.hasOwnProperty('subcategory')) {
                obj['subcategory'] = ApiClient.convertToType(data['subcategory'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RepoArticleSrcApiDtoArticleCreateRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RepoArticleSrcApiDtoArticleCreateRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RepoArticleSrcApiDtoArticleCreateRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['abstract'] && !(typeof data['abstract'] === 'string' || data['abstract'] instanceof String)) {
            throw new Error("Expected the field `abstract` to be a primitive type in the JSON string but got " + data['abstract']);
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['link'] && !(typeof data['link'] === 'string' || data['link'] instanceof String)) {
            throw new Error("Expected the field `link` to be a primitive type in the JSON string but got " + data['link']);
        }
        // ensure the json data is a string
        if (data['published_at'] && !(typeof data['published_at'] === 'string' || data['published_at'] instanceof String)) {
            throw new Error("Expected the field `published_at` to be a primitive type in the JSON string but got " + data['published_at']);
        }
        // ensure the json data is a string
        if (data['subcategory'] && !(typeof data['subcategory'] === 'string' || data['subcategory'] instanceof String)) {
            throw new Error("Expected the field `subcategory` to be a primitive type in the JSON string but got " + data['subcategory']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}

RepoArticleSrcApiDtoArticleCreateRequest.RequiredProperties = ["category", "link", "published_at", "subcategory", "title"];

/**
 * @member {String} abstract
 */
RepoArticleSrcApiDtoArticleCreateRequest.prototype['abstract'] = undefined;

/**
 * @member {String} category
 */
RepoArticleSrcApiDtoArticleCreateRequest.prototype['category'] = undefined;

/**
 * Optional: If provided, must be unique
 * @member {Number} id
 */
RepoArticleSrcApiDtoArticleCreateRequest.prototype['id'] = undefined;

/**
 * @member {String} link
 */
RepoArticleSrcApiDtoArticleCreateRequest.prototype['link'] = undefined;

/**
 * @member {String} published_at
 */
RepoArticleSrcApiDtoArticleCreateRequest.prototype['published_at'] = undefined;

/**
 * @member {String} subcategory
 */
RepoArticleSrcApiDtoArticleCreateRequest.prototype['subcategory'] = undefined;

/**
 * @member {String} title
 */
RepoArticleSrcApiDtoArticleCreateRequest.prototype['title'] = undefined;






export default RepoArticleSrcApiDtoArticleCreateRequest;

