/**
 * account.newsbro.cc
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RepoAccountSrcApiDtoErrorResponse from '../model/RepoAccountSrcApiDtoErrorResponse';
import RepoAccountSrcApiDtoUserResponse from '../model/RepoAccountSrcApiDtoUserResponse';

/**
* User service.
* @module api/UserApi
* @version 1.3.2
*/
export default class UserApi {

    /**
    * Constructs a new UserApi. 
    * @alias module:api/UserApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the usersGet operation.
     * @callback module:api/UserApi~usersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RepoAccountSrcApiDtoUserResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all users
     * Get a list of all users (admin only)
     * @param {String} authorization Insert your access token
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] Limit
     * @param {Number} [offset = 0)] Offset
     * @param {module:api/UserApi~usersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RepoAccountSrcApiDtoUserResponse>}
     */
    usersGet(authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling usersGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RepoAccountSrcApiDtoUserResponse];
      return this.apiClient.callApi(
        '/api/v1/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersProfileGet operation.
     * @callback module:api/UserApi~usersProfileGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RepoAccountSrcApiDtoUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user profile
     * Get the profile of the authenticated user
     * @param {String} authorization Insert your access token
     * @param {module:api/UserApi~usersProfileGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RepoAccountSrcApiDtoUserResponse}
     */
    usersProfileGet(authorization, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling usersProfileGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RepoAccountSrcApiDtoUserResponse;
      return this.apiClient.callApi(
        '/api/v1/users/profile', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersProfilePut operation.
     * @callback module:api/UserApi~usersProfilePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RepoAccountSrcApiDtoUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update user profile
     * Update the profile of the authenticated user
     * @param {String} authorization Insert your access token
     * @param {Object.<String, {String: Object}>} updateRequest Update Request
     * @param {module:api/UserApi~usersProfilePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RepoAccountSrcApiDtoUserResponse}
     */
    usersProfilePut(authorization, updateRequest, callback) {
      let postBody = updateRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling usersProfilePut");
      }
      // verify the required parameter 'updateRequest' is set
      if (updateRequest === undefined || updateRequest === null) {
        throw new Error("Missing the required parameter 'updateRequest' when calling usersProfilePut");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RepoAccountSrcApiDtoUserResponse;
      return this.apiClient.callApi(
        '/api/v1/users/profile', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
