/**
 * account.newsbro.cc
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RepoAccountSrcApiDtoErrorResponse from '../model/RepoAccountSrcApiDtoErrorResponse';
import RepoAccountSrcApiDtoLoginRequest from '../model/RepoAccountSrcApiDtoLoginRequest';
import RepoAccountSrcApiDtoLoginResponse from '../model/RepoAccountSrcApiDtoLoginResponse';
import RepoAccountSrcApiDtoRegisterRequest from '../model/RepoAccountSrcApiDtoRegisterRequest';

/**
* Auth service.
* @module api/AuthApi
* @version 1.3.2
*/
export default class AuthApi {

    /**
    * Constructs a new AuthApi. 
    * @alias module:api/AuthApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the authLoginPost operation.
     * @callback module:api/AuthApi~authLoginPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RepoAccountSrcApiDtoLoginResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login a user
     * Login a user with email and password
     * @param {module:model/RepoAccountSrcApiDtoLoginRequest} loginRequest Login Request
     * @param {module:api/AuthApi~authLoginPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RepoAccountSrcApiDtoLoginResponse}
     */
    authLoginPost(loginRequest, callback) {
      let postBody = loginRequest;
      // verify the required parameter 'loginRequest' is set
      if (loginRequest === undefined || loginRequest === null) {
        throw new Error("Missing the required parameter 'loginRequest' when calling authLoginPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RepoAccountSrcApiDtoLoginResponse;
      return this.apiClient.callApi(
        '/api/v1/auth/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authOauthCallbackGet operation.
     * @callback module:api/AuthApi~authOauthCallbackGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * OAuth Callback
     * Handle OAuth provider callback
     * @param {String} code Authorization Code
     * @param {String} state State Parameter
     * @param {module:api/AuthApi~authOauthCallbackGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    authOauthCallbackGet(code, state, callback) {
      let postBody = null;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling authOauthCallbackGet");
      }
      // verify the required parameter 'state' is set
      if (state === undefined || state === null) {
        throw new Error("Missing the required parameter 'state' when calling authOauthCallbackGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'code': code,
        'state': state
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/auth/oauth/callback', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authOauthLoginGet operation.
     * @callback module:api/AuthApi~authOauthLoginGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * OAuth Login
     * Redirect to OAuth provider for login
     * @param {module:api/AuthApi~authOauthLoginGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    authOauthLoginGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/auth/oauth/login', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authRefreshPost operation.
     * @callback module:api/AuthApi~authRefreshPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RepoAccountSrcApiDtoLoginResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refresh JWT token
     * Refresh JWT token using refresh token
     * @param {module:api/AuthApi~authRefreshPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RepoAccountSrcApiDtoLoginResponse}
     */
    authRefreshPost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RepoAccountSrcApiDtoLoginResponse;
      return this.apiClient.callApi(
        '/api/v1/auth/refresh', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authRegisterPost operation.
     * @callback module:api/AuthApi~authRegisterPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register a new user
     * Register a new user with email and password
     * @param {module:model/RepoAccountSrcApiDtoRegisterRequest} registerRequest Register Request
     * @param {module:api/AuthApi~authRegisterPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    authRegisterPost(registerRequest, callback) {
      let postBody = registerRequest;
      // verify the required parameter 'registerRequest' is set
      if (registerRequest === undefined || registerRequest === null) {
        throw new Error("Missing the required parameter 'registerRequest' when calling authRegisterPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/auth/register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
