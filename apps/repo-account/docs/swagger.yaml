definitions:
  repo_account_src_api_dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  repo_account_src_api_dto.RegisterRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        minLength: 6
        type: string
      username:
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  repo_account_src_data_models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      last_name:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login a user with email and password
      parameters:
      - description: Login Request
        in: body
        name: loginRequest
        required: true
        schema:
          $ref: '#/definitions/repo_account_src_api_dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      summary: Login a user
      tags:
      - Auth
  /auth/oauth/callback:
    get:
      description: Handle OAuth provider callback
      parameters:
      - description: Authorization Code
        in: query
        name: code
        required: true
        type: string
      - description: State Parameter
        in: query
        name: state
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      summary: OAuth Callback
      tags:
      - Auth
  /auth/oauth/login:
    get:
      description: Redirect to OAuth provider for login
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "503":
          description: Service Unavailable
      summary: OAuth Login
      tags:
      - Auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh JWT token using refresh token
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Refresh JWT token
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with email and password
      parameters:
      - description: Register Request
        in: body
        name: registerRequest
        required: true
        schema:
          $ref: '#/definitions/repo_account_src_api_dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
      summary: Register a new user
      tags:
      - Auth
  /users:
    get:
      description: Get a list of all users (admin only)
      parameters:
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset
        in: query
        name: offset
        type: integer
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/repo_account_src_data_models.User'
            type: array
        "403":
          description: Forbidden
      security:
      - JWT: []
      summary: Get all users
      tags:
      - User
  /users/profile:
    get:
      description: Get the profile of the authenticated user
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/repo_account_src_data_models.User'
        "401":
          description: Unauthorized
      security:
      - JWT: []
      summary: Get user profile
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Update the profile of the authenticated user
      parameters:
      - description: Update Request
        in: body
        name: updateRequest
        required: true
        schema:
          additionalProperties: true
          type: object
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/repo_account_src_data_models.User'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
      - JWT: []
      summary: Update user profile
      tags:
      - User
swagger: "2.0"
